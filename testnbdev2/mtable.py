# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_mtables.ipynb.

# %% auto 0
__all__ = ['table', 'simple_validator', 'check_file_errors', 'create_cerberus_schema', 'read_csv']

# %% ../nbs/00_mtables.ipynb 5
import pandas as pd        
import numpy as np 
import re
import datetime
from cerberus import Validator
from urllib.error import URLError

# %% ../nbs/00_mtables.ipynb 7
def table(n: int, # a number for which you want multiplication tables
         ):
    for i in range(1,11,1):
        print(f"{n} times {i} = {n*i}")

# %% ../nbs/00_mtables.ipynb 10
def simple_validator(df: pd.DataFrame, # pandas dataframe wth data,
                     schema: dict,  #python dictionary with validation schema,
                    ) -> dict: # python dicionary with validation errors
    """
    simple_validator is a simple function to validate a given dataframe  with given schema.
    data frame  rows converted into list of dictioners and validates with
    respect to the given schema and gives output a error dictionary.
    
    Input
    -----
        df  - pandas dataframe
        schema - cerberus schema
    Output
    ------
        dictionery with error details
    """

    from cerberus import Validator

    v=Validator(schema)
    errors={}
    df= df.applymap(lambda x: x.strip() if isinstance(x, str) else x)
    df=df.replace(r'^\s*$', np.nan, regex=True)
    df = df.replace({np.nan: None})
    my_reader=df.to_dict(orient='records')

    for index,line in enumerate(my_reader):
        if  not v.validate(line):
            errors[index+2]=v.errors
    return errors 

# %% ../nbs/00_mtables.ipynb 11
def check_file_errors(file: str)-> dict: #dictionary of errors in accessing file 
    """checks if the given csv file is available and readable
       Parameters
       ----------
       file:
           path/location of file
       
       Returns
       -------
           errors: dictionary of file access errors
    """
    errors={}
    
    try:
        df=pd.read_csv(file)
        
    except FileNotFoundError as e:
        errors["error"]="File not found please check file path"

    except URLError as e1:
        errors["error"]='URL not found,invalid URL'

    except UnicodeDecodeError as e2:
        errors["error"]="corrupted data or not a csv file"
        
    return errors

# %% ../nbs/00_mtables.ipynb 14
def create_cerberus_schema(col_dict):
    """takes a column dictionary and returns a schema file 
    to be used in validation with the cerberus validator
    """

    schema={}
    for k,v in col_dict.items():
        if  v is int:
            schema[k]={"type":"integer",'coerce':int}
        elif v is float:
            schema[k]={"type":"float",'coerce':float}
        elif v is str:
            schema[k]={"type":"string",'coerce':str}
        elif type(v) is tuple:
            if v[0] in ["date","datetime"]:
              dt=str(v[1])
              schema[k]={"type":"datetime",'coerce':lambda d: datetime.datetime.strptime(d,dt)}
    return schema

# %% ../nbs/00_mtables.ipynb 15
def read_csv(file:str, # file path
              col_dict:dict,# dictionary with column name  as keys  and  dtypes  as  values
              n_max:int #maximum number of errors  allowed to accepting the  validataion 
              )-> tuple: # a pandas dataframe and an  error list
    """
    This function read_csv  helps you to read a csv file with given  columns  only, additionally converts into given data types.
    
    Parameters
    ----------
    file: file path.
        
    col_dict: dictionary with column name  as keys  and  dtypes  as  values, 
            e.g., d={"colmn_name":float,"colmn_name":int} ,for date {"colmn_name":("date","%Y-%m-%d")}.
            Note, date  is an special case need to pass a tuple with key "date" and format.
    n_max:   maximum number of errors  allowed to accepting the  validataion
    Returns
    -------
         function returns dictionary with errors 
         function returns empty dictionary if no  errors found
    """
    return None, None
